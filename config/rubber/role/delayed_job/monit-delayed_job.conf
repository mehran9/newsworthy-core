<%
  @path = '/etc/monit/monit.d/monit-delayed_job.conf'
  current_path = "/mnt/#{rubber_env.app_name}-#{Rubber.env}/current"

  bin_path = "bin/delayed_job"
  script_path = "script/delayed_job"
  script_path = File.exists?(bin_path) ? bin_path : script_path
  config = "#{current_path}/config/settings/#{Rubber.env}.yml"
  pools = File.exists?(script_path) ? YAML::load(File.open(config))['pools'] : []
%>
<% pools.each do |k,v| %>
  <% (1..v).map do |p| %>
    <% id = "#{Socket.gethostname}_#{k}_#{p}" %>
    check process delayed_job_<%= id %>
      with pidfile <%= rubber_env.delayed_job_pid_dir %>/delayed_job.<%= id %>.pid
      start program = "/usr/bin/sudo -H -u <%= rubber_env.app_user %> /bin/bash -l -c 'cd <%= current_path %> && RAILS_ENV=<%= Rubber.env %> bundle exec <%= script_path %> --queue=<%= k %> --identifier=<%= id %> --pid-dir=<%= rubber_env.delayed_job_pid_dir %> start'" with timeout 60 seconds
      stop program = "/usr/bin/sudo -H -u <%= rubber_env.app_user %> /bin/bash -l -c 'cd <%= current_path %> && RAILS_ENV=<%= Rubber.env %> bundle exec <%= script_path %> --queue=<%= k %> --identifier=<%= id %> --pid-dir=<%= rubber_env.delayed_job_pid_dir %> stop'" with timeout 60 seconds
      group delayed_job
  <% end %>
<% end %>

  if 5 restarts within 5 cycles then timeout
